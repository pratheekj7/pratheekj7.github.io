<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Pratheek's Blog - misc</title><link href="https://pratheekj7.github.io/" rel="alternate"></link><link href="https://pratheekj7.github.io/feeds/misc.atom.xml" rel="self"></link><id>https://pratheekj7.github.io/</id><updated>2019-09-10T15:52:55+05:30</updated><entry><title>"SQL INJECTION"</title><link href="https://pratheekj7.github.io/sql-injection.html" rel="alternate"></link><published>2019-09-10T15:52:55+05:30</published><updated>2019-09-10T15:52:55+05:30</updated><author><name>Pratheek Jain</name></author><id>tag:pratheekj7.github.io,2019-09-10:/sql-injection.html</id><summary type="html">&lt;p&gt;&lt;strong&gt;What is &lt;em&gt;SQL Injection&lt;/em&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQL injection is a code injection technique that might destroy your database.
SQL injection is one of the most common web hacking techniques.
SQL injection is the placement of malicious code in SQL statements, via web page input.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;SQL in Web Pages&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQL injection usually occurs â€¦&lt;/p&gt;&lt;/blockquote&gt;</summary><content type="html">&lt;p&gt;&lt;strong&gt;What is &lt;em&gt;SQL Injection&lt;/em&gt;?&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQL injection is a code injection technique that might destroy your database.
SQL injection is one of the most common web hacking techniques.
SQL injection is the placement of malicious code in SQL statements, via web page input.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;SQL in Web Pages&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;SQL injection usually occurs when you ask a user for input, like their username/userid, and instead of a name/id, the user gives you an SQL statement that you will unknowingly run on your database.&lt;/p&gt;
&lt;p&gt;Look at the following example which creates a SELECT statement by adding a variable (userId) to a select string. The variable is fetched from user input (getRequestString):&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Example&lt;/strong&gt;
userId = getRequestString("UserId");
sql = "SELECT * FROM Users WHERE UserId = " + userId;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;SQL Injection Examples&lt;/strong&gt;
1. &lt;em&gt;SQL Injection Based on 1=1 is Always True&lt;/em&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Look at the example above again. The original purpose of the code was to create an SQL statement to select a user, with a given user id.&lt;/p&gt;
&lt;p&gt;If there is nothing to prevent a user from entering "wrong" input, the user can enter some "smart" input like this:&lt;/p&gt;
&lt;p&gt;userId: 
105 OR 1=1&lt;/p&gt;
&lt;p&gt;Then, the SQL statement will look like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SELECT UserId, Name, Password FROM Users WHERE UserId = 105 or 1=1;&lt;/strong&gt;
The SQL above is valid and will return userId, name, password from the "Users" table, since OR 1=1 is always TRUE.&lt;/p&gt;
&lt;p&gt;A hacker might get access to all the user names and passwords in a database, by simply inserting 105 OR 1=1 into the input field.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;SQL Injection Based on ""="" is Always True&lt;/em&gt;&lt;blockquote&gt;
&lt;p&gt;A hacker might get access to user names and passwords in a database by simply inserting " OR ""=" into the user name or password text box:&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;User Name:
" or ""="
Password:
" or ""="&lt;/p&gt;
&lt;p&gt;The code at the server will create a valid SQL statement like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SELECT * FROM Users WHERE Name ="" or ""="" AND Pass ="" or ""="";&lt;/strong&gt;
The SQL above is valid and will return all rows from the "Users" table, since OR ""="" is always TRUE.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;SQL Injection Based on Batched SQL Statements&lt;/em&gt; &lt;blockquote&gt;
&lt;p&gt;A batch of SQL statements is a group of two or more SQL statements, separated by semicolons.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;blockquote&gt;
&lt;p&gt;The SQL statement below will return all rows from the "Users" table, then delete the "Suppliers" table.
&lt;strong&gt;SELECT * FROM Users; DROP TABLE Suppliers;&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Look at the following example:&lt;/p&gt;
&lt;p&gt;userId = getRequestString("UserId");
SQL = "SELECT * FROM Users WHERE UserId = " + userId;&lt;/p&gt;
&lt;p&gt;And the following input:
user id: 
105; DROP TABLE Suppliers&lt;/p&gt;
&lt;p&gt;The valid SQL statement would look like this:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;SELECT * FROM Users WHERE UserId = 105; DROP TABLE Suppliers;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;strong&gt;Prevention Techniques&lt;/strong&gt;
1. Use of Prepared Statements (with Parameterized Queries)
2. Use of Stored Procedures&lt;/p&gt;</content></entry></feed>